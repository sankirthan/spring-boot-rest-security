-- customer table --

create table customer(
	customer_id int generated by default as identity(start with 1, increment by 1) primary key,
	first_name varchar(128) not null,
	last_name varchar(128) not null
);

insert into customer(first_name, last_name) values ('Kevin', 'Keller');
insert into customer(first_name, last_name) values ('Jason', 'Cook');
insert into customer(first_name, last_name) values ('Nicole', 'Hudson');
insert into customer(first_name, last_name) values ('Albert', 'Marshall');
insert into customer(first_name, last_name) values ('Evelyn', 'Shultz');

-- create index for the most used use cases
create index idx_customer_last_name on customer (last_name);

-- using custom tables, just to show how it can be done with spring security --
-- user table for auth --
create table app_user(
	username varchar(64) not null,
	password varchar(256) not null,
	active boolean not null,
	locked boolean not null,
	failed_login_count int not null,
	primary key (username)
);

-- here the password is encoded using BCryptPasswordEncoder --
insert into app_user(username, password, active, locked, failed_login_count) 
values('user', '$2a$10$FNWsF0r1uxw.2gWKj43HRuKJtXDdUW82kNhWVGYI1mPWQNIrs9Gou', TRUE, FALSE, 0);
insert into app_user(username, password, active, locked, failed_login_count) 
values('admin', '$2a$10$n7lmamH8XocLglmzMCF/eOGFe5sWgRDmxa1SW4yYpSwvrIMCUmxiS', TRUE, FALSE, 0);

-- roles table for auth --
create table app_user_role(
	username varchar(64) not null,
	role_name varchar(64) not null,
	primary key (username, role_name),
	foreign key (username) references app_user (username)
);

insert into app_user_role(username, role_name) values('user', 'USER');
insert into app_user_role(username, role_name) values('admin', 'USER');
insert into app_user_role(username, role_name) values('admin', 'ADMIN');